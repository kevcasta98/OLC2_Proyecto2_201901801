//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Gramatica/Analizador.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class AnalizadorLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, NEWLINE=41, COMENTARIO_LINEA=42, COMENTARIO_MULTILINEA=43, 
		INT=44, DECIMAL=45, BOOLEANO=46, CARACTER=47, CADENA=48, ID=49, MODULO=50, 
		IGUAL=51, DOSPUNTOS_IGUAL=52, PARENTESIS_ABRE=53, PARENTESIS_CIERRA=54;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "NEWLINE", 
		"COMENTARIO_LINEA", "COMENTARIO_MULTILINEA", "INT", "DECIMAL", "BOOLEANO", 
		"CARACTER", "CADENA", "ID", "MODULO", "IGUAL", "DOSPUNTOS_IGUAL", "PARENTESIS_ABRE", 
		"PARENTESIS_CIERRA"
	};


	public AnalizadorLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AnalizadorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'fmt.Println('", "','", "';'", "'if'", "'else'", "'for'", "'switch'", 
		"'{'", "'}'", "'func'", "'return'", "'case'", "':'", "'default'", "'var'", 
		"'!'", "'-'", "'++'", "'--'", "'*'", "'/'", "'+'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='", "'+='", "'-='", "'&&'", "'||'", "'['", "']'", 
		"'int'", "'float64'", "'string'", "'bool'", "'rune'", "'void'", null, 
		null, null, null, null, null, null, null, null, "'%'", "'='", "':='", 
		"'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "NEWLINE", "COMENTARIO_LINEA", "COMENTARIO_MULTILINEA", 
		"INT", "DECIMAL", "BOOLEANO", "CARACTER", "CADENA", "ID", "MODULO", "IGUAL", 
		"DOSPUNTOS_IGUAL", "PARENTESIS_ABRE", "PARENTESIS_CIERRA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Analizador.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AnalizadorLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,54,362,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
		1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
		9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
		11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
		14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,
		20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,
		26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,
		31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,
		35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,
		37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,4,
		40,264,8,40,11,40,12,40,265,1,40,1,40,1,41,1,41,1,41,1,41,5,41,274,8,41,
		10,41,12,41,277,9,41,1,41,1,41,1,42,1,42,1,42,1,42,5,42,285,8,42,10,42,
		12,42,288,9,42,1,42,1,42,1,42,1,42,1,42,1,43,4,43,296,8,43,11,43,12,43,
		297,1,44,4,44,301,8,44,11,44,12,44,302,1,44,1,44,4,44,307,8,44,11,44,12,
		44,308,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,320,8,45,1,46,
		1,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,330,8,47,10,47,12,47,333,9,47,
		1,47,1,47,1,48,4,48,338,8,48,11,48,12,48,339,1,48,3,48,343,8,48,1,48,4,
		48,346,8,48,11,48,12,48,347,3,48,350,8,48,1,49,1,49,1,50,1,50,1,51,1,51,
		1,51,1,52,1,52,1,53,1,53,1,286,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
		17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
		41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
		65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
		89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,1,0,7,
		3,0,9,10,13,13,32,32,2,0,10,10,13,13,1,0,48,57,4,0,10,10,13,13,34,34,39,
		39,2,0,34,34,39,39,3,0,10,10,13,13,34,34,2,0,65,90,97,122,374,0,1,1,0,
		0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
		0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
		1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
		0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
		1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,1,109,1,0,0,0,3,122,
		1,0,0,0,5,124,1,0,0,0,7,126,1,0,0,0,9,129,1,0,0,0,11,134,1,0,0,0,13,138,
		1,0,0,0,15,145,1,0,0,0,17,147,1,0,0,0,19,149,1,0,0,0,21,154,1,0,0,0,23,
		161,1,0,0,0,25,166,1,0,0,0,27,168,1,0,0,0,29,176,1,0,0,0,31,180,1,0,0,
		0,33,182,1,0,0,0,35,184,1,0,0,0,37,187,1,0,0,0,39,190,1,0,0,0,41,192,1,
		0,0,0,43,194,1,0,0,0,45,196,1,0,0,0,47,198,1,0,0,0,49,201,1,0,0,0,51,203,
		1,0,0,0,53,206,1,0,0,0,55,209,1,0,0,0,57,212,1,0,0,0,59,215,1,0,0,0,61,
		218,1,0,0,0,63,221,1,0,0,0,65,224,1,0,0,0,67,226,1,0,0,0,69,228,1,0,0,
		0,71,232,1,0,0,0,73,240,1,0,0,0,75,247,1,0,0,0,77,252,1,0,0,0,79,257,1,
		0,0,0,81,263,1,0,0,0,83,269,1,0,0,0,85,280,1,0,0,0,87,295,1,0,0,0,89,300,
		1,0,0,0,91,319,1,0,0,0,93,321,1,0,0,0,95,325,1,0,0,0,97,337,1,0,0,0,99,
		351,1,0,0,0,101,353,1,0,0,0,103,355,1,0,0,0,105,358,1,0,0,0,107,360,1,
		0,0,0,109,110,5,102,0,0,110,111,5,109,0,0,111,112,5,116,0,0,112,113,5,
		46,0,0,113,114,5,80,0,0,114,115,5,114,0,0,115,116,5,105,0,0,116,117,5,
		110,0,0,117,118,5,116,0,0,118,119,5,108,0,0,119,120,5,110,0,0,120,121,
		5,40,0,0,121,2,1,0,0,0,122,123,5,44,0,0,123,4,1,0,0,0,124,125,5,59,0,0,
		125,6,1,0,0,0,126,127,5,105,0,0,127,128,5,102,0,0,128,8,1,0,0,0,129,130,
		5,101,0,0,130,131,5,108,0,0,131,132,5,115,0,0,132,133,5,101,0,0,133,10,
		1,0,0,0,134,135,5,102,0,0,135,136,5,111,0,0,136,137,5,114,0,0,137,12,1,
		0,0,0,138,139,5,115,0,0,139,140,5,119,0,0,140,141,5,105,0,0,141,142,5,
		116,0,0,142,143,5,99,0,0,143,144,5,104,0,0,144,14,1,0,0,0,145,146,5,123,
		0,0,146,16,1,0,0,0,147,148,5,125,0,0,148,18,1,0,0,0,149,150,5,102,0,0,
		150,151,5,117,0,0,151,152,5,110,0,0,152,153,5,99,0,0,153,20,1,0,0,0,154,
		155,5,114,0,0,155,156,5,101,0,0,156,157,5,116,0,0,157,158,5,117,0,0,158,
		159,5,114,0,0,159,160,5,110,0,0,160,22,1,0,0,0,161,162,5,99,0,0,162,163,
		5,97,0,0,163,164,5,115,0,0,164,165,5,101,0,0,165,24,1,0,0,0,166,167,5,
		58,0,0,167,26,1,0,0,0,168,169,5,100,0,0,169,170,5,101,0,0,170,171,5,102,
		0,0,171,172,5,97,0,0,172,173,5,117,0,0,173,174,5,108,0,0,174,175,5,116,
		0,0,175,28,1,0,0,0,176,177,5,118,0,0,177,178,5,97,0,0,178,179,5,114,0,
		0,179,30,1,0,0,0,180,181,5,33,0,0,181,32,1,0,0,0,182,183,5,45,0,0,183,
		34,1,0,0,0,184,185,5,43,0,0,185,186,5,43,0,0,186,36,1,0,0,0,187,188,5,
		45,0,0,188,189,5,45,0,0,189,38,1,0,0,0,190,191,5,42,0,0,191,40,1,0,0,0,
		192,193,5,47,0,0,193,42,1,0,0,0,194,195,5,43,0,0,195,44,1,0,0,0,196,197,
		5,60,0,0,197,46,1,0,0,0,198,199,5,60,0,0,199,200,5,61,0,0,200,48,1,0,0,
		0,201,202,5,62,0,0,202,50,1,0,0,0,203,204,5,62,0,0,204,205,5,61,0,0,205,
		52,1,0,0,0,206,207,5,61,0,0,207,208,5,61,0,0,208,54,1,0,0,0,209,210,5,
		33,0,0,210,211,5,61,0,0,211,56,1,0,0,0,212,213,5,43,0,0,213,214,5,61,0,
		0,214,58,1,0,0,0,215,216,5,45,0,0,216,217,5,61,0,0,217,60,1,0,0,0,218,
		219,5,38,0,0,219,220,5,38,0,0,220,62,1,0,0,0,221,222,5,124,0,0,222,223,
		5,124,0,0,223,64,1,0,0,0,224,225,5,91,0,0,225,66,1,0,0,0,226,227,5,93,
		0,0,227,68,1,0,0,0,228,229,5,105,0,0,229,230,5,110,0,0,230,231,5,116,0,
		0,231,70,1,0,0,0,232,233,5,102,0,0,233,234,5,108,0,0,234,235,5,111,0,0,
		235,236,5,97,0,0,236,237,5,116,0,0,237,238,5,54,0,0,238,239,5,52,0,0,239,
		72,1,0,0,0,240,241,5,115,0,0,241,242,5,116,0,0,242,243,5,114,0,0,243,244,
		5,105,0,0,244,245,5,110,0,0,245,246,5,103,0,0,246,74,1,0,0,0,247,248,5,
		98,0,0,248,249,5,111,0,0,249,250,5,111,0,0,250,251,5,108,0,0,251,76,1,
		0,0,0,252,253,5,114,0,0,253,254,5,117,0,0,254,255,5,110,0,0,255,256,5,
		101,0,0,256,78,1,0,0,0,257,258,5,118,0,0,258,259,5,111,0,0,259,260,5,105,
		0,0,260,261,5,100,0,0,261,80,1,0,0,0,262,264,7,0,0,0,263,262,1,0,0,0,264,
		265,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,6,
		40,0,0,268,82,1,0,0,0,269,270,5,47,0,0,270,271,5,47,0,0,271,275,1,0,0,
		0,272,274,8,1,0,0,273,272,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,
		276,1,0,0,0,276,278,1,0,0,0,277,275,1,0,0,0,278,279,6,41,0,0,279,84,1,
		0,0,0,280,281,5,47,0,0,281,282,5,42,0,0,282,286,1,0,0,0,283,285,9,0,0,
		0,284,283,1,0,0,0,285,288,1,0,0,0,286,287,1,0,0,0,286,284,1,0,0,0,287,
		289,1,0,0,0,288,286,1,0,0,0,289,290,5,42,0,0,290,291,5,47,0,0,291,292,
		1,0,0,0,292,293,6,42,0,0,293,86,1,0,0,0,294,296,7,2,0,0,295,294,1,0,0,
		0,296,297,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,88,1,0,0,0,299,301,
		7,2,0,0,300,299,1,0,0,0,301,302,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,
		0,303,304,1,0,0,0,304,306,5,46,0,0,305,307,7,2,0,0,306,305,1,0,0,0,307,
		308,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,90,1,0,0,0,310,311,5,116,
		0,0,311,312,5,114,0,0,312,313,5,117,0,0,313,320,5,101,0,0,314,315,5,102,
		0,0,315,316,5,97,0,0,316,317,5,108,0,0,317,318,5,115,0,0,318,320,5,101,
		0,0,319,310,1,0,0,0,319,314,1,0,0,0,320,92,1,0,0,0,321,322,5,39,0,0,322,
		323,8,3,0,0,323,324,5,39,0,0,324,94,1,0,0,0,325,331,7,4,0,0,326,330,8,
		5,0,0,327,328,5,34,0,0,328,330,5,34,0,0,329,326,1,0,0,0,329,327,1,0,0,
		0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,334,1,0,0,0,333,
		331,1,0,0,0,334,335,7,4,0,0,335,96,1,0,0,0,336,338,7,6,0,0,337,336,1,0,
		0,0,338,339,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,
		343,5,95,0,0,342,341,1,0,0,0,342,343,1,0,0,0,343,349,1,0,0,0,344,346,7,
		2,0,0,345,344,1,0,0,0,346,347,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,
		348,350,1,0,0,0,349,345,1,0,0,0,349,350,1,0,0,0,350,98,1,0,0,0,351,352,
		5,37,0,0,352,100,1,0,0,0,353,354,5,61,0,0,354,102,1,0,0,0,355,356,5,58,
		0,0,356,357,5,61,0,0,357,104,1,0,0,0,358,359,5,40,0,0,359,106,1,0,0,0,
		360,361,5,41,0,0,361,108,1,0,0,0,14,0,265,275,286,297,302,308,319,329,
		331,339,342,347,349,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
