//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Gramatica/Analizador.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class AnalizadorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, NEWLINE=37, COMENTARIO_LINEA=38, 
		COMENTARIO_MULTILINEA=39, INT=40, DECIMAL=41, BOOLEANO=42, CARACTER=43, 
		CADENA=44, ID=45, MODULO=46, IGUAL=47, DOSPUNTOS_IGUAL=48, PARENTESIS_ABRE=49, 
		PARENTESIS_CIERRA=50;
	public const int
		RULE_program = 0, RULE_dcl = 1, RULE_block = 2, RULE_varDcl = 3, RULE_varAsign = 4, 
		RULE_varCall = 5, RULE_parametros = 6, RULE_param = 7, RULE_args = 8, 
		RULE_expr = 9, RULE_tipo = 10;
	public static readonly string[] ruleNames = {
		"program", "dcl", "block", "varDcl", "varAsign", "varCall", "parametros", 
		"param", "args", "expr", "tipo"
	};

	private static readonly string[] _LiteralNames = {
		null, "'fmt.Println('", "','", "';'", "'if'", "'else'", "'for'", "'func'", 
		"'return'", "'{'", "'}'", "'var'", "'-'", "'*'", "'/'", "'++'", "'--'", 
		"'+'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'&&'", "'||'", "'+='", 
		"'-='", "'!'", "'['", "']'", "'int'", "'float64'", "'string'", "'bool'", 
		"'rune'", "'void'", null, null, null, null, null, null, null, null, null, 
		"'%'", "'='", "':='", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "NEWLINE", "COMENTARIO_LINEA", "COMENTARIO_MULTILINEA", "INT", "DECIMAL", 
		"BOOLEANO", "CARACTER", "CADENA", "ID", "MODULO", "IGUAL", "DOSPUNTOS_IGUAL", 
		"PARENTESIS_ABRE", "PARENTESIS_CIERRA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Analizador.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AnalizadorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AnalizadorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AnalizadorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35184372091346L) != 0)) {
				{
				{
				State = 22;
				dcl();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
	 
		public DclContext() { }
		public virtual void CopyFrom(DclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		public PrintStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		public IfStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarCallContext varCall() {
			return GetRuleContext<VarCallContext>(0);
		}
		public FuncCallStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		public WhileStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDeclStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		public VarDeclStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarAsignContext varAsign() {
			return GetRuleContext<VarAsignContext>(0);
		}
		public AsignStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncDeclStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public FuncDeclStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDeclStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 2, RULE_dcl);
		int _la;
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new PrintStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 28;
				Match(T__0);
				State = 29;
				expr(0);
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 30;
					Match(T__1);
					State = 31;
					expr(0);
					}
					}
					State = 36;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 37;
				Match(PARENTESIS_CIERRA);
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 38;
					Match(T__2);
					}
				}

				}
				break;
			case 2:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				Match(T__3);
				State = 43;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 42;
					Match(PARENTESIS_ABRE);
					}
					break;
				}
				State = 45;
				expr(0);
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARENTESIS_CIERRA) {
					{
					State = 46;
					Match(PARENTESIS_CIERRA);
					}
				}

				State = 49;
				block();
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 50;
					Match(T__4);
					State = 51;
					block();
					}
				}

				}
				break;
			case 3:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 54;
				Match(T__5);
				State = 56;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 55;
					Match(PARENTESIS_ABRE);
					}
					break;
				}
				State = 58;
				expr(0);
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARENTESIS_CIERRA) {
					{
					State = 59;
					Match(PARENTESIS_CIERRA);
					}
				}

				State = 62;
				block();
				}
				break;
			case 4:
				_localctx = new FuncDeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 64;
				Match(T__6);
				State = 65;
				Match(ID);
				State = 66;
				Match(PARENTESIS_ABRE);
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 67;
					parametros();
					}
				}

				State = 70;
				Match(PARENTESIS_CIERRA);
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 135291469824L) != 0)) {
					{
					State = 71;
					tipo();
					}
				}

				State = 74;
				block();
				}
				break;
			case 5:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 75;
				Match(T__7);
				State = 76;
				expr(0);
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 77;
					Match(T__2);
					}
				}

				}
				break;
			case 6:
				_localctx = new FuncCallStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 80;
				varCall();
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 81;
					Match(T__2);
					}
				}

				}
				break;
			case 7:
				_localctx = new AsignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 84;
				varAsign();
				}
				break;
			case 8:
				_localctx = new VarDeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 85;
				varDcl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(T__8);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35184372091346L) != 0)) {
				{
				{
				State = 89;
				dcl();
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(AnalizadorParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSPUNTOS_IGUAL() { return GetToken(AnalizadorParser.DOSPUNTOS_IGUAL, 0); }
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(Context, State);
		EnterRule(_localctx, 6, RULE_varDcl);
		int _la;
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				Match(T__10);
				State = 98;
				Match(ID);
				State = 99;
				tipo();
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGUAL) {
					{
					State = 100;
					Match(IGUAL);
					State = 101;
					expr(0);
					}
				}

				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 104;
					Match(T__2);
					}
				}

				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107;
				Match(ID);
				State = 108;
				Match(DOSPUNTOS_IGUAL);
				State = 109;
				expr(0);
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 110;
					Match(T__2);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAsignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(AnalizadorParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarAsignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAsign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarAsign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarAsignContext varAsign() {
		VarAsignContext _localctx = new VarAsignContext(Context, State);
		EnterRule(_localctx, 8, RULE_varAsign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(ID);
			State = 116;
			Match(IGUAL);
			State = 117;
			expr(0);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 118;
				Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public VarCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarCallContext varCall() {
		VarCallContext _localctx = new VarCallContext(Context, State);
		EnterRule(_localctx, 10, RULE_varCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(ID);
			State = 122;
			Match(PARENTESIS_ABRE);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 632219991281664L) != 0)) {
				{
				State = 123;
				args();
				}
			}

			State = 126;
			Match(PARENTESIS_CIERRA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametrosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ParametrosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametros; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametros(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametrosContext parametros() {
		ParametrosContext _localctx = new ParametrosContext(Context, State);
		EnterRule(_localctx, 12, RULE_parametros);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			param();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 129;
				Match(T__1);
				State = 130;
				param();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 14, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(ID);
			State = 137;
			tipo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 16, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			expr(0);
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 140;
				Match(T__1);
				State = 141;
				expr(0);
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CorchetesContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CorchetesContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCorchetes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementoDecrementoContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		public IncrementoDecrementoContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementoDecremento(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelationalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpCharContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARACTER() { return GetToken(AnalizadorParser.CARACTER, 0); }
		public ExpCharContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpChar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpIntegerContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AnalizadorParser.INT, 0); }
		public ExpIntegerContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivModContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(AnalizadorParser.MODULO, 0); }
		public MulDivModContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		public IdentifierContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsigAddSubContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AsigAddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsigAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegateContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpDoubleContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(AnalizadorParser.DECIMAL, 0); }
		public ExpDoubleContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgualDesigualContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IgualDesigualContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgualDesigual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpBooleanContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEANO() { return GetToken(AnalizadorParser.BOOLEANO, 0); }
		public ExpBooleanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpStringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CADENA() { return GetToken(AnalizadorParser.CADENA, 0); }
		public ExpStringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarCallContext varCall() {
			return GetRuleContext<VarCallContext>(0);
		}
		public FuncCallExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				_localctx = new NegateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 148;
				Match(T__11);
				State = 149;
				expr(20);
				}
				break;
			case 2:
				{
				_localctx = new IncrementoDecrementoContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 150;
				Match(ID);
				State = 151;
				((IncrementoDecrementoContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__15) ) {
					((IncrementoDecrementoContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new AsigAddSubContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 152;
				Match(ID);
				State = 153;
				((AsigAddSubContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__25 || _la==T__26) ) {
					((AsigAddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 154;
				expr(12);
				}
				break;
			case 4:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 155;
				Match(T__27);
				State = 156;
				expr(10);
				}
				break;
			case 5:
				{
				_localctx = new ExpIntegerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 157;
				Match(INT);
				}
				break;
			case 6:
				{
				_localctx = new ExpDoubleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 158;
				Match(DECIMAL);
				}
				break;
			case 7:
				{
				_localctx = new ExpStringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 159;
				Match(CADENA);
				}
				break;
			case 8:
				{
				_localctx = new ExpBooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 160;
				Match(BOOLEANO);
				}
				break;
			case 9:
				{
				_localctx = new ExpCharContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 161;
				Match(CARACTER);
				}
				break;
			case 10:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 162;
				Match(ID);
				}
				break;
			case 11:
				{
				_localctx = new FuncCallExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 163;
				varCall();
				}
				break;
			case 12:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 164;
				Match(PARENTESIS_ABRE);
				State = 165;
				expr(0);
				State = 166;
				Match(PARENTESIS_CIERRA);
				}
				break;
			case 13:
				{
				_localctx = new CorchetesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 168;
				Match(T__28);
				State = 169;
				expr(0);
				State = 170;
				Match(T__29);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 195;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new MulDivModContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 174;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 175;
						((MulDivModContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 70368744202240L) != 0)) ) {
							((MulDivModContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 176;
						expr(20);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 177;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 178;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__11 || _la==T__16) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 179;
						expr(18);
						}
						break;
					case 3:
						{
						_localctx = new RelationalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 180;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 181;
						((RelationalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3932160L) != 0)) ) {
							((RelationalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 182;
						expr(17);
						}
						break;
					case 4:
						{
						_localctx = new IgualDesigualContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 183;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 184;
						((IgualDesigualContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__21 || _la==T__22) ) {
							((IgualDesigualContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 185;
						expr(16);
						}
						break;
					case 5:
						{
						_localctx = new AndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 186;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 187;
						((AndContext)_localctx).op = Match(T__23);
						State = 188;
						expr(15);
						}
						break;
					case 6:
						{
						_localctx = new OrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 189;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 190;
						((OrContext)_localctx).op = Match(T__24);
						State = 191;
						expr(14);
						}
						break;
					case 7:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 192;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 193;
						((MulDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__12 || _la==T__13) ) {
							((MulDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 194;
						expr(12);
						}
						break;
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TipoContext : ParserRuleContext {
		public TipoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoContext tipo() {
		TipoContext _localctx = new TipoContext(Context, State);
		EnterRule(_localctx, 20, RULE_tipo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 135291469824L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 19);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 11);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,50,203,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,5,0,24,8,0,10,0,12,0,27,9,0,1,1,1,1,
		1,1,1,1,5,1,33,8,1,10,1,12,1,36,9,1,1,1,1,1,3,1,40,8,1,1,1,1,1,3,1,44,
		8,1,1,1,1,1,3,1,48,8,1,1,1,1,1,1,1,3,1,53,8,1,1,1,1,1,3,1,57,8,1,1,1,1,
		1,3,1,61,8,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,69,8,1,1,1,1,1,3,1,73,8,1,1,1,
		1,1,1,1,1,1,3,1,79,8,1,1,1,1,1,3,1,83,8,1,1,1,1,1,3,1,87,8,1,1,2,1,2,5,
		2,91,8,2,10,2,12,2,94,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,103,8,3,1,3,
		3,3,106,8,3,1,3,1,3,1,3,1,3,3,3,112,8,3,3,3,114,8,3,1,4,1,4,1,4,1,4,3,
		4,120,8,4,1,5,1,5,1,5,3,5,125,8,5,1,5,1,5,1,6,1,6,1,6,5,6,132,8,6,10,6,
		12,6,135,9,6,1,7,1,7,1,7,1,8,1,8,1,8,5,8,143,8,8,10,8,12,8,146,9,8,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,173,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,196,8,9,10,9,12,
		9,199,9,9,1,10,1,10,1,10,0,1,18,11,0,2,4,6,8,10,12,14,16,18,20,0,8,1,0,
		15,16,1,0,26,27,2,0,13,14,46,46,2,0,12,12,17,17,1,0,18,21,1,0,22,23,1,
		0,13,14,1,0,31,36,238,0,25,1,0,0,0,2,86,1,0,0,0,4,88,1,0,0,0,6,113,1,0,
		0,0,8,115,1,0,0,0,10,121,1,0,0,0,12,128,1,0,0,0,14,136,1,0,0,0,16,139,
		1,0,0,0,18,172,1,0,0,0,20,200,1,0,0,0,22,24,3,2,1,0,23,22,1,0,0,0,24,27,
		1,0,0,0,25,23,1,0,0,0,25,26,1,0,0,0,26,1,1,0,0,0,27,25,1,0,0,0,28,29,5,
		1,0,0,29,34,3,18,9,0,30,31,5,2,0,0,31,33,3,18,9,0,32,30,1,0,0,0,33,36,
		1,0,0,0,34,32,1,0,0,0,34,35,1,0,0,0,35,37,1,0,0,0,36,34,1,0,0,0,37,39,
		5,50,0,0,38,40,5,3,0,0,39,38,1,0,0,0,39,40,1,0,0,0,40,87,1,0,0,0,41,43,
		5,4,0,0,42,44,5,49,0,0,43,42,1,0,0,0,43,44,1,0,0,0,44,45,1,0,0,0,45,47,
		3,18,9,0,46,48,5,50,0,0,47,46,1,0,0,0,47,48,1,0,0,0,48,49,1,0,0,0,49,52,
		3,4,2,0,50,51,5,5,0,0,51,53,3,4,2,0,52,50,1,0,0,0,52,53,1,0,0,0,53,87,
		1,0,0,0,54,56,5,6,0,0,55,57,5,49,0,0,56,55,1,0,0,0,56,57,1,0,0,0,57,58,
		1,0,0,0,58,60,3,18,9,0,59,61,5,50,0,0,60,59,1,0,0,0,60,61,1,0,0,0,61,62,
		1,0,0,0,62,63,3,4,2,0,63,87,1,0,0,0,64,65,5,7,0,0,65,66,5,45,0,0,66,68,
		5,49,0,0,67,69,3,12,6,0,68,67,1,0,0,0,68,69,1,0,0,0,69,70,1,0,0,0,70,72,
		5,50,0,0,71,73,3,20,10,0,72,71,1,0,0,0,72,73,1,0,0,0,73,74,1,0,0,0,74,
		87,3,4,2,0,75,76,5,8,0,0,76,78,3,18,9,0,77,79,5,3,0,0,78,77,1,0,0,0,78,
		79,1,0,0,0,79,87,1,0,0,0,80,82,3,10,5,0,81,83,5,3,0,0,82,81,1,0,0,0,82,
		83,1,0,0,0,83,87,1,0,0,0,84,87,3,8,4,0,85,87,3,6,3,0,86,28,1,0,0,0,86,
		41,1,0,0,0,86,54,1,0,0,0,86,64,1,0,0,0,86,75,1,0,0,0,86,80,1,0,0,0,86,
		84,1,0,0,0,86,85,1,0,0,0,87,3,1,0,0,0,88,92,5,9,0,0,89,91,3,2,1,0,90,89,
		1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,95,1,0,0,0,94,92,
		1,0,0,0,95,96,5,10,0,0,96,5,1,0,0,0,97,98,5,11,0,0,98,99,5,45,0,0,99,102,
		3,20,10,0,100,101,5,47,0,0,101,103,3,18,9,0,102,100,1,0,0,0,102,103,1,
		0,0,0,103,105,1,0,0,0,104,106,5,3,0,0,105,104,1,0,0,0,105,106,1,0,0,0,
		106,114,1,0,0,0,107,108,5,45,0,0,108,109,5,48,0,0,109,111,3,18,9,0,110,
		112,5,3,0,0,111,110,1,0,0,0,111,112,1,0,0,0,112,114,1,0,0,0,113,97,1,0,
		0,0,113,107,1,0,0,0,114,7,1,0,0,0,115,116,5,45,0,0,116,117,5,47,0,0,117,
		119,3,18,9,0,118,120,5,3,0,0,119,118,1,0,0,0,119,120,1,0,0,0,120,9,1,0,
		0,0,121,122,5,45,0,0,122,124,5,49,0,0,123,125,3,16,8,0,124,123,1,0,0,0,
		124,125,1,0,0,0,125,126,1,0,0,0,126,127,5,50,0,0,127,11,1,0,0,0,128,133,
		3,14,7,0,129,130,5,2,0,0,130,132,3,14,7,0,131,129,1,0,0,0,132,135,1,0,
		0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,13,1,0,0,0,135,133,1,0,0,0,136,
		137,5,45,0,0,137,138,3,20,10,0,138,15,1,0,0,0,139,144,3,18,9,0,140,141,
		5,2,0,0,141,143,3,18,9,0,142,140,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,
		0,144,145,1,0,0,0,145,17,1,0,0,0,146,144,1,0,0,0,147,148,6,9,-1,0,148,
		149,5,12,0,0,149,173,3,18,9,20,150,151,5,45,0,0,151,173,7,0,0,0,152,153,
		5,45,0,0,153,154,7,1,0,0,154,173,3,18,9,12,155,156,5,28,0,0,156,173,3,
		18,9,10,157,173,5,40,0,0,158,173,5,41,0,0,159,173,5,44,0,0,160,173,5,42,
		0,0,161,173,5,43,0,0,162,173,5,45,0,0,163,173,3,10,5,0,164,165,5,49,0,
		0,165,166,3,18,9,0,166,167,5,50,0,0,167,173,1,0,0,0,168,169,5,29,0,0,169,
		170,3,18,9,0,170,171,5,30,0,0,171,173,1,0,0,0,172,147,1,0,0,0,172,150,
		1,0,0,0,172,152,1,0,0,0,172,155,1,0,0,0,172,157,1,0,0,0,172,158,1,0,0,
		0,172,159,1,0,0,0,172,160,1,0,0,0,172,161,1,0,0,0,172,162,1,0,0,0,172,
		163,1,0,0,0,172,164,1,0,0,0,172,168,1,0,0,0,173,197,1,0,0,0,174,175,10,
		19,0,0,175,176,7,2,0,0,176,196,3,18,9,20,177,178,10,17,0,0,178,179,7,3,
		0,0,179,196,3,18,9,18,180,181,10,16,0,0,181,182,7,4,0,0,182,196,3,18,9,
		17,183,184,10,15,0,0,184,185,7,5,0,0,185,196,3,18,9,16,186,187,10,14,0,
		0,187,188,5,24,0,0,188,196,3,18,9,15,189,190,10,13,0,0,190,191,5,25,0,
		0,191,196,3,18,9,14,192,193,10,11,0,0,193,194,7,6,0,0,194,196,3,18,9,12,
		195,174,1,0,0,0,195,177,1,0,0,0,195,180,1,0,0,0,195,183,1,0,0,0,195,186,
		1,0,0,0,195,189,1,0,0,0,195,192,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,
		0,197,198,1,0,0,0,198,19,1,0,0,0,199,197,1,0,0,0,200,201,7,7,0,0,201,21,
		1,0,0,0,25,25,34,39,43,47,52,56,60,68,72,78,82,86,92,102,105,111,113,119,
		124,133,144,172,195,197
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
