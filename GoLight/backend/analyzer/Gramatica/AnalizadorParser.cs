//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Gramatica/Analizador.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class AnalizadorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, NEWLINE=41, COMENTARIO_LINEA=42, COMENTARIO_MULTILINEA=43, 
		INT=44, DECIMAL=45, BOOLEANO=46, CARACTER=47, CADENA=48, ID=49, MODULO=50, 
		IGUAL=51, DOSPUNTOS_IGUAL=52, PARENTESIS_ABRE=53, PARENTESIS_CIERRA=54;
	public const int
		RULE_program = 0, RULE_dcl = 1, RULE_forID = 2, RULE_caseList = 3, RULE_caseStmt = 4, 
		RULE_block = 5, RULE_varDcl = 6, RULE_varAsign = 7, RULE_varCall = 8, 
		RULE_parametros = 9, RULE_param = 10, RULE_args = 11, RULE_expr = 12, 
		RULE_tipo = 13;
	public static readonly string[] ruleNames = {
		"program", "dcl", "forID", "caseList", "caseStmt", "block", "varDcl", 
		"varAsign", "varCall", "parametros", "param", "args", "expr", "tipo"
	};

	private static readonly string[] _LiteralNames = {
		null, "'fmt.Println('", "','", "';'", "'if'", "'else'", "'for'", "'switch'", 
		"'{'", "'}'", "'func'", "'return'", "'case'", "':'", "'default'", "'var'", 
		"'!'", "'-'", "'++'", "'--'", "'*'", "'/'", "'+'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='", "'+='", "'-='", "'&&'", "'||'", "'['", "']'", 
		"'int'", "'float64'", "'string'", "'bool'", "'rune'", "'void'", null, 
		null, null, null, null, null, null, null, null, "'%'", "'='", "':='", 
		"'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "NEWLINE", "COMENTARIO_LINEA", "COMENTARIO_MULTILINEA", 
		"INT", "DECIMAL", "BOOLEANO", "CARACTER", "CADENA", "ID", "MODULO", "IGUAL", 
		"DOSPUNTOS_IGUAL", "PARENTESIS_ABRE", "PARENTESIS_CIERRA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Analizador.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AnalizadorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AnalizadorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AnalizadorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 10115515565706706L) != 0)) {
				{
				{
				State = 28;
				dcl();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
	 
		public DclContext() { }
		public virtual void CopyFrom(DclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseListContext caseList() {
			return GetRuleContext<CaseListContext>(0);
		}
		public SwitchStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		public PrintStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl() {
			return GetRuleContext<DclContext>(0);
		}
		public IfStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarCallContext varCall() {
			return GetRuleContext<VarCallContext>(0);
		}
		public FuncCallStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		public WhileStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDeclStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		public VarDeclStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public BlockStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarAsignContext varAsign() {
			return GetRuleContext<VarAsignContext>(0);
		}
		public AsignStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncDeclStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public FuncDeclStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDeclStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForIDContext forID() {
			return GetRuleContext<ForIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		public ForStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 2, RULE_dcl);
		int _la;
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new PrintStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				Match(T__0);
				State = 35;
				expr(0);
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 36;
					Match(T__1);
					State = 37;
					expr(0);
					}
					}
					State = 42;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 43;
				Match(PARENTESIS_CIERRA);
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 44;
					Match(T__2);
					}
				}

				}
				break;
			case 2:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 47;
				Match(T__3);
				State = 48;
				expr(0);
				State = 49;
				block();
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 50;
					Match(T__4);
					State = 53;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 51;
						dcl();
						}
						break;
					case 2:
						{
						State = 52;
						block();
						}
						break;
					}
					}
				}

				}
				break;
			case 3:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 57;
				Match(T__5);
				State = 59;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 58;
					Match(PARENTESIS_ABRE);
					}
					break;
				}
				State = 61;
				expr(0);
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARENTESIS_CIERRA) {
					{
					State = 62;
					Match(PARENTESIS_CIERRA);
					}
				}

				State = 65;
				block();
				}
				break;
			case 4:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 67;
				Match(T__5);
				State = 69;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 68;
					Match(PARENTESIS_ABRE);
					}
					break;
				}
				State = 71;
				forID();
				State = 72;
				expr(0);
				State = 73;
				Match(T__2);
				State = 74;
				expr(0);
				State = 75;
				Match(PARENTESIS_CIERRA);
				State = 76;
				block();
				}
				break;
			case 5:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 78;
				Match(T__6);
				State = 79;
				expr(0);
				State = 80;
				Match(T__7);
				State = 81;
				caseList();
				State = 82;
				Match(T__8);
				}
				break;
			case 6:
				_localctx = new FuncDeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 84;
				Match(T__9);
				State = 85;
				Match(ID);
				State = 86;
				Match(PARENTESIS_ABRE);
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 87;
					parametros();
					}
				}

				State = 90;
				Match(PARENTESIS_CIERRA);
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2164663517184L) != 0)) {
					{
					State = 91;
					tipo();
					}
				}

				State = 94;
				block();
				}
				break;
			case 7:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 95;
				Match(T__10);
				State = 96;
				expr(0);
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 97;
					Match(T__2);
					}
				}

				}
				break;
			case 8:
				_localctx = new FuncCallStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 100;
				varCall();
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 101;
					Match(T__2);
					}
				}

				}
				break;
			case 9:
				_localctx = new AsignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 104;
				varAsign();
				}
				break;
			case 10:
				_localctx = new VarDeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 105;
				varDcl();
				}
				break;
			case 11:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 106;
				Match(T__7);
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 10115515565706706L) != 0)) {
					{
					{
					State = 107;
					dcl();
					}
					}
					State = 112;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 113;
				Match(T__8);
				}
				break;
			case 12:
				_localctx = new ExprStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 114;
				expr(0);
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 115;
					Match(T__2);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIDContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forID; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForIDContext forID() {
		ForIDContext _localctx = new ForIDContext(Context, State);
		EnterRule(_localctx, 4, RULE_forID);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120;
				varDcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121;
				expr(0);
				State = 122;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext[] caseStmt() {
			return GetRuleContexts<CaseStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext caseStmt(int i) {
			return GetRuleContext<CaseStmtContext>(i);
		}
		public CaseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListContext caseList() {
		CaseListContext _localctx = new CaseListContext(Context, State);
		EnterRule(_localctx, 6, RULE_caseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 126;
				caseStmt();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__11 || _la==T__13 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public CaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStmtContext caseStmt() {
		CaseStmtContext _localctx = new CaseStmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_caseStmt);
		int _la;
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				Match(T__11);
				State = 132;
				expr(0);
				State = 133;
				Match(T__12);
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 10115515565706706L) != 0)) {
					{
					{
					State = 134;
					dcl();
					}
					}
					State = 139;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140;
				Match(T__13);
				State = 141;
				Match(T__12);
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 10115515565706706L) != 0)) {
					{
					{
					State = 142;
					dcl();
					}
					}
					State = 147;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(T__7);
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 10115515565706706L) != 0)) {
				{
				{
				State = 151;
				dcl();
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 157;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(AnalizadorParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSPUNTOS_IGUAL() { return GetToken(AnalizadorParser.DOSPUNTOS_IGUAL, 0); }
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(Context, State);
		EnterRule(_localctx, 12, RULE_varDcl);
		int _la;
		try {
			State = 175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159;
				Match(T__14);
				State = 160;
				Match(ID);
				State = 161;
				tipo();
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGUAL) {
					{
					State = 162;
					Match(IGUAL);
					State = 163;
					expr(0);
					}
				}

				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 166;
					Match(T__2);
					}
				}

				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				Match(ID);
				State = 170;
				Match(DOSPUNTOS_IGUAL);
				State = 171;
				expr(0);
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 172;
					Match(T__2);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAsignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(AnalizadorParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarAsignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAsign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarAsign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarAsignContext varAsign() {
		VarAsignContext _localctx = new VarAsignContext(Context, State);
		EnterRule(_localctx, 14, RULE_varAsign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(ID);
			State = 178;
			Match(IGUAL);
			State = 179;
			expr(0);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 180;
				Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public VarCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarCallContext varCall() {
		VarCallContext _localctx = new VarCallContext(Context, State);
		EnterRule(_localctx, 16, RULE_varCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(ID);
			State = 184;
			Match(PARENTESIS_ABRE);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 10115515565670400L) != 0)) {
				{
				State = 185;
				args();
				}
			}

			State = 188;
			Match(PARENTESIS_CIERRA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametrosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ParametrosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametros; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametros(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametrosContext parametros() {
		ParametrosContext _localctx = new ParametrosContext(Context, State);
		EnterRule(_localctx, 18, RULE_parametros);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			param();
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 191;
				Match(T__1);
				State = 192;
				param();
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 20, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(ID);
			State = 199;
			tipo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 22, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			expr(0);
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 202;
				Match(T__1);
				State = 203;
				expr(0);
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CorchetesContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CorchetesContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCorchetes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementoDecrementoContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		public IncrementoDecrementoContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementoDecremento(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelationalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpCharContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARACTER() { return GetToken(AnalizadorParser.CARACTER, 0); }
		public ExpCharContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpChar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpIntegerContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AnalizadorParser.INT, 0); }
		public ExpIntegerContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivModContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(AnalizadorParser.MODULO, 0); }
		public MulDivModContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		public IdentifierContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsigAddSubContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AsigAddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsigAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegateContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpDoubleContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(AnalizadorParser.DECIMAL, 0); }
		public ExpDoubleContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgualDesigualContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IgualDesigualContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgualDesigual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpBooleanContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEANO() { return GetToken(AnalizadorParser.BOOLEANO, 0); }
		public ExpBooleanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpStringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CADENA() { return GetToken(AnalizadorParser.CADENA, 0); }
		public ExpStringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarCallContext varCall() {
			return GetRuleContext<VarCallContext>(0);
		}
		public FuncCallExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 210;
				Match(T__15);
				State = 211;
				expr(19);
				}
				break;
			case 2:
				{
				_localctx = new NegateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 212;
				Match(T__16);
				State = 213;
				expr(18);
				}
				break;
			case 3:
				{
				_localctx = new IncrementoDecrementoContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 214;
				Match(ID);
				State = 215;
				((IncrementoDecrementoContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__17 || _la==T__18) ) {
					((IncrementoDecrementoContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				{
				_localctx = new AsigAddSubContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 216;
				Match(ID);
				State = 217;
				((AsigAddSubContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__28 || _la==T__29) ) {
					((AsigAddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 218;
				expr(12);
				}
				break;
			case 5:
				{
				_localctx = new ExpIntegerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 219;
				Match(INT);
				}
				break;
			case 6:
				{
				_localctx = new ExpDoubleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 220;
				Match(DECIMAL);
				}
				break;
			case 7:
				{
				_localctx = new ExpStringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 221;
				Match(CADENA);
				}
				break;
			case 8:
				{
				_localctx = new ExpBooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 222;
				Match(BOOLEANO);
				}
				break;
			case 9:
				{
				_localctx = new ExpCharContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 223;
				Match(CARACTER);
				}
				break;
			case 10:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 224;
				Match(ID);
				}
				break;
			case 11:
				{
				_localctx = new FuncCallExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 225;
				varCall();
				}
				break;
			case 12:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 226;
				Match(PARENTESIS_ABRE);
				State = 227;
				expr(0);
				State = 228;
				Match(PARENTESIS_CIERRA);
				}
				break;
			case 13:
				{
				_localctx = new CorchetesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 230;
				Match(T__32);
				State = 231;
				expr(0);
				State = 232;
				Match(T__33);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 256;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 254;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new MulDivModContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 236;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 237;
						((MulDivModContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1125899909988352L) != 0)) ) {
							((MulDivModContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 238;
						expr(17);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 239;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 240;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__16 || _la==T__21) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 241;
						expr(16);
						}
						break;
					case 3:
						{
						_localctx = new RelationalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 242;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 243;
						((RelationalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 125829120L) != 0)) ) {
							((RelationalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 244;
						expr(15);
						}
						break;
					case 4:
						{
						_localctx = new IgualDesigualContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 245;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 246;
						((IgualDesigualContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__26 || _la==T__27) ) {
							((IgualDesigualContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 247;
						expr(14);
						}
						break;
					case 5:
						{
						_localctx = new AndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 248;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 249;
						((AndContext)_localctx).op = Match(T__30);
						State = 250;
						expr(12);
						}
						break;
					case 6:
						{
						_localctx = new OrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 251;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 252;
						((OrContext)_localctx).op = Match(T__31);
						State = 253;
						expr(11);
						}
						break;
					}
					} 
				}
				State = 258;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TipoContext : ParserRuleContext {
		public TipoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoContext tipo() {
		TipoContext _localctx = new TipoContext(Context, State);
		EnterRule(_localctx, 26, RULE_tipo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2164663517184L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 16);
		case 1: return Precpred(Context, 15);
		case 2: return Precpred(Context, 14);
		case 3: return Precpred(Context, 13);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 10);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,54,262,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,5,0,30,
		8,0,10,0,12,0,33,9,0,1,1,1,1,1,1,1,1,5,1,39,8,1,10,1,12,1,42,9,1,1,1,1,
		1,3,1,46,8,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,54,8,1,3,1,56,8,1,1,1,1,1,3,1,
		60,8,1,1,1,1,1,3,1,64,8,1,1,1,1,1,1,1,1,1,3,1,70,8,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,89,8,1,1,1,1,1,3,
		1,93,8,1,1,1,1,1,1,1,1,1,3,1,99,8,1,1,1,1,1,3,1,103,8,1,1,1,1,1,1,1,1,
		1,5,1,109,8,1,10,1,12,1,112,9,1,1,1,1,1,1,1,3,1,117,8,1,3,1,119,8,1,1,
		2,1,2,1,2,1,2,3,2,125,8,2,1,3,4,3,128,8,3,11,3,12,3,129,1,4,1,4,1,4,1,
		4,5,4,136,8,4,10,4,12,4,139,9,4,1,4,1,4,1,4,5,4,144,8,4,10,4,12,4,147,
		9,4,3,4,149,8,4,1,5,1,5,5,5,153,8,5,10,5,12,5,156,9,5,1,5,1,5,1,6,1,6,
		1,6,1,6,1,6,3,6,165,8,6,1,6,3,6,168,8,6,1,6,1,6,1,6,1,6,3,6,174,8,6,3,
		6,176,8,6,1,7,1,7,1,7,1,7,3,7,182,8,7,1,8,1,8,1,8,3,8,187,8,8,1,8,1,8,
		1,9,1,9,1,9,5,9,194,8,9,10,9,12,9,197,9,9,1,10,1,10,1,10,1,11,1,11,1,11,
		5,11,205,8,11,10,11,12,11,208,9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,3,12,235,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,255,8,12,10,
		12,12,12,258,9,12,1,13,1,13,1,13,0,1,24,14,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,0,7,1,0,18,19,1,0,29,30,2,0,20,21,50,50,2,0,17,17,22,22,1,0,23,
		26,1,0,27,28,1,0,35,40,304,0,31,1,0,0,0,2,118,1,0,0,0,4,124,1,0,0,0,6,
		127,1,0,0,0,8,148,1,0,0,0,10,150,1,0,0,0,12,175,1,0,0,0,14,177,1,0,0,0,
		16,183,1,0,0,0,18,190,1,0,0,0,20,198,1,0,0,0,22,201,1,0,0,0,24,234,1,0,
		0,0,26,259,1,0,0,0,28,30,3,2,1,0,29,28,1,0,0,0,30,33,1,0,0,0,31,29,1,0,
		0,0,31,32,1,0,0,0,32,1,1,0,0,0,33,31,1,0,0,0,34,35,5,1,0,0,35,40,3,24,
		12,0,36,37,5,2,0,0,37,39,3,24,12,0,38,36,1,0,0,0,39,42,1,0,0,0,40,38,1,
		0,0,0,40,41,1,0,0,0,41,43,1,0,0,0,42,40,1,0,0,0,43,45,5,54,0,0,44,46,5,
		3,0,0,45,44,1,0,0,0,45,46,1,0,0,0,46,119,1,0,0,0,47,48,5,4,0,0,48,49,3,
		24,12,0,49,55,3,10,5,0,50,53,5,5,0,0,51,54,3,2,1,0,52,54,3,10,5,0,53,51,
		1,0,0,0,53,52,1,0,0,0,54,56,1,0,0,0,55,50,1,0,0,0,55,56,1,0,0,0,56,119,
		1,0,0,0,57,59,5,6,0,0,58,60,5,53,0,0,59,58,1,0,0,0,59,60,1,0,0,0,60,61,
		1,0,0,0,61,63,3,24,12,0,62,64,5,54,0,0,63,62,1,0,0,0,63,64,1,0,0,0,64,
		65,1,0,0,0,65,66,3,10,5,0,66,119,1,0,0,0,67,69,5,6,0,0,68,70,5,53,0,0,
		69,68,1,0,0,0,69,70,1,0,0,0,70,71,1,0,0,0,71,72,3,4,2,0,72,73,3,24,12,
		0,73,74,5,3,0,0,74,75,3,24,12,0,75,76,5,54,0,0,76,77,3,10,5,0,77,119,1,
		0,0,0,78,79,5,7,0,0,79,80,3,24,12,0,80,81,5,8,0,0,81,82,3,6,3,0,82,83,
		5,9,0,0,83,119,1,0,0,0,84,85,5,10,0,0,85,86,5,49,0,0,86,88,5,53,0,0,87,
		89,3,18,9,0,88,87,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,92,5,54,0,0,91,
		93,3,26,13,0,92,91,1,0,0,0,92,93,1,0,0,0,93,94,1,0,0,0,94,119,3,10,5,0,
		95,96,5,11,0,0,96,98,3,24,12,0,97,99,5,3,0,0,98,97,1,0,0,0,98,99,1,0,0,
		0,99,119,1,0,0,0,100,102,3,16,8,0,101,103,5,3,0,0,102,101,1,0,0,0,102,
		103,1,0,0,0,103,119,1,0,0,0,104,119,3,14,7,0,105,119,3,12,6,0,106,110,
		5,8,0,0,107,109,3,2,1,0,108,107,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,
		0,110,111,1,0,0,0,111,113,1,0,0,0,112,110,1,0,0,0,113,119,5,9,0,0,114,
		116,3,24,12,0,115,117,5,3,0,0,116,115,1,0,0,0,116,117,1,0,0,0,117,119,
		1,0,0,0,118,34,1,0,0,0,118,47,1,0,0,0,118,57,1,0,0,0,118,67,1,0,0,0,118,
		78,1,0,0,0,118,84,1,0,0,0,118,95,1,0,0,0,118,100,1,0,0,0,118,104,1,0,0,
		0,118,105,1,0,0,0,118,106,1,0,0,0,118,114,1,0,0,0,119,3,1,0,0,0,120,125,
		3,12,6,0,121,122,3,24,12,0,122,123,5,3,0,0,123,125,1,0,0,0,124,120,1,0,
		0,0,124,121,1,0,0,0,125,5,1,0,0,0,126,128,3,8,4,0,127,126,1,0,0,0,128,
		129,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,7,1,0,0,0,131,132,5,12,
		0,0,132,133,3,24,12,0,133,137,5,13,0,0,134,136,3,2,1,0,135,134,1,0,0,0,
		136,139,1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,149,1,0,0,0,139,137,
		1,0,0,0,140,141,5,14,0,0,141,145,5,13,0,0,142,144,3,2,1,0,143,142,1,0,
		0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,149,1,0,0,0,147,
		145,1,0,0,0,148,131,1,0,0,0,148,140,1,0,0,0,149,9,1,0,0,0,150,154,5,8,
		0,0,151,153,3,2,1,0,152,151,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,
		155,1,0,0,0,155,157,1,0,0,0,156,154,1,0,0,0,157,158,5,9,0,0,158,11,1,0,
		0,0,159,160,5,15,0,0,160,161,5,49,0,0,161,164,3,26,13,0,162,163,5,51,0,
		0,163,165,3,24,12,0,164,162,1,0,0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,
		168,5,3,0,0,167,166,1,0,0,0,167,168,1,0,0,0,168,176,1,0,0,0,169,170,5,
		49,0,0,170,171,5,52,0,0,171,173,3,24,12,0,172,174,5,3,0,0,173,172,1,0,
		0,0,173,174,1,0,0,0,174,176,1,0,0,0,175,159,1,0,0,0,175,169,1,0,0,0,176,
		13,1,0,0,0,177,178,5,49,0,0,178,179,5,51,0,0,179,181,3,24,12,0,180,182,
		5,3,0,0,181,180,1,0,0,0,181,182,1,0,0,0,182,15,1,0,0,0,183,184,5,49,0,
		0,184,186,5,53,0,0,185,187,3,22,11,0,186,185,1,0,0,0,186,187,1,0,0,0,187,
		188,1,0,0,0,188,189,5,54,0,0,189,17,1,0,0,0,190,195,3,20,10,0,191,192,
		5,2,0,0,192,194,3,20,10,0,193,191,1,0,0,0,194,197,1,0,0,0,195,193,1,0,
		0,0,195,196,1,0,0,0,196,19,1,0,0,0,197,195,1,0,0,0,198,199,5,49,0,0,199,
		200,3,26,13,0,200,21,1,0,0,0,201,206,3,24,12,0,202,203,5,2,0,0,203,205,
		3,24,12,0,204,202,1,0,0,0,205,208,1,0,0,0,206,204,1,0,0,0,206,207,1,0,
		0,0,207,23,1,0,0,0,208,206,1,0,0,0,209,210,6,12,-1,0,210,211,5,16,0,0,
		211,235,3,24,12,19,212,213,5,17,0,0,213,235,3,24,12,18,214,215,5,49,0,
		0,215,235,7,0,0,0,216,217,5,49,0,0,217,218,7,1,0,0,218,235,3,24,12,12,
		219,235,5,44,0,0,220,235,5,45,0,0,221,235,5,48,0,0,222,235,5,46,0,0,223,
		235,5,47,0,0,224,235,5,49,0,0,225,235,3,16,8,0,226,227,5,53,0,0,227,228,
		3,24,12,0,228,229,5,54,0,0,229,235,1,0,0,0,230,231,5,33,0,0,231,232,3,
		24,12,0,232,233,5,34,0,0,233,235,1,0,0,0,234,209,1,0,0,0,234,212,1,0,0,
		0,234,214,1,0,0,0,234,216,1,0,0,0,234,219,1,0,0,0,234,220,1,0,0,0,234,
		221,1,0,0,0,234,222,1,0,0,0,234,223,1,0,0,0,234,224,1,0,0,0,234,225,1,
		0,0,0,234,226,1,0,0,0,234,230,1,0,0,0,235,256,1,0,0,0,236,237,10,16,0,
		0,237,238,7,2,0,0,238,255,3,24,12,17,239,240,10,15,0,0,240,241,7,3,0,0,
		241,255,3,24,12,16,242,243,10,14,0,0,243,244,7,4,0,0,244,255,3,24,12,15,
		245,246,10,13,0,0,246,247,7,5,0,0,247,255,3,24,12,14,248,249,10,11,0,0,
		249,250,5,31,0,0,250,255,3,24,12,12,251,252,10,10,0,0,252,253,5,32,0,0,
		253,255,3,24,12,11,254,236,1,0,0,0,254,239,1,0,0,0,254,242,1,0,0,0,254,
		245,1,0,0,0,254,248,1,0,0,0,254,251,1,0,0,0,255,258,1,0,0,0,256,254,1,
		0,0,0,256,257,1,0,0,0,257,25,1,0,0,0,258,256,1,0,0,0,259,260,7,6,0,0,260,
		27,1,0,0,0,32,31,40,45,53,55,59,63,69,88,92,98,102,110,116,118,124,129,
		137,145,148,154,164,167,173,175,181,186,195,206,234,254,256
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
