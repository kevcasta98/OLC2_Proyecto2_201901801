//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Gramatica/Analizador.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class AnalizadorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, NEWLINE=44, COMENTARIO_LINEA=45, 
		COMENTARIO_MULTILINEA=46, INT=47, DECIMAL=48, BOOLEANO=49, CARACTER=50, 
		CADENA=51, ID=52, MODULO=53, IGUAL=54, DOSPUNTOS_IGUAL=55, PARENTESIS_ABRE=56, 
		PARENTESIS_CIERRA=57;
	public const int
		RULE_program = 0, RULE_dcl = 1, RULE_sliceDcl = 2, RULE_forID = 3, RULE_caseList = 4, 
		RULE_caseStmt = 5, RULE_block = 6, RULE_varDcl = 7, RULE_varAsign = 8, 
		RULE_varCall = 9, RULE_parametros = 10, RULE_param = 11, RULE_args = 12, 
		RULE_expr = 13, RULE_tipo = 14;
	public static readonly string[] ruleNames = {
		"program", "dcl", "sliceDcl", "forID", "caseList", "caseStmt", "block", 
		"varDcl", "varAsign", "varCall", "parametros", "param", "args", "expr", 
		"tipo"
	};

	private static readonly string[] _LiteralNames = {
		null, "'fmt.Println('", "','", "';'", "'if'", "'else'", "'for'", "'switch'", 
		"'{'", "'}'", "'func'", "'break'", "'continue'", "'return'", "'slice.Index'", 
		"'['", "']'", "'case'", "':'", "'default'", "'var'", "'!'", "'-'", "'++'", 
		"'--'", "'*'", "'/'", "'+'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", 
		"'+='", "'-='", "'&&'", "'||'", "'int'", "'float64'", "'string'", "'bool'", 
		"'rune'", "'void'", null, null, null, null, null, null, null, null, null, 
		"'%'", "'='", "':='", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "NEWLINE", "COMENTARIO_LINEA", 
		"COMENTARIO_MULTILINEA", "INT", "DECIMAL", "BOOLEANO", "CARACTER", "CADENA", 
		"ID", "MODULO", "IGUAL", "DOSPUNTOS_IGUAL", "PARENTESIS_ABRE", "PARENTESIS_CIERRA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Analizador.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AnalizadorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AnalizadorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AnalizadorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 80924055811718610L) != 0)) {
				{
				{
				State = 30;
				dcl();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
	 
		public DclContext() { }
		public virtual void CopyFrom(DclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseListContext caseList() {
			return GetRuleContext<CaseListContext>(0);
		}
		public SwitchStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		public PrintStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceIndexContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		public SliceIndexContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarCallContext varCall() {
			return GetRuleContext<VarCallContext>(0);
		}
		public FuncCallStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public BlockStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarAsignContext varAsign() {
			return GetRuleContext<VarAsignContext>(0);
		}
		public AsignStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStmtContext : DclContext {
		public ContinueStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl() {
			return GetRuleContext<DclContext>(0);
		}
		public IfStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		public WhileStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStmtContext : DclContext {
		public BreakStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDeclStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		public VarDeclStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncDeclStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public FuncDeclStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDeclStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceAsignContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(AnalizadorParser.IGUAL, 0); }
		public SliceAsignContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceAsign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForIDContext forID() {
			return GetRuleContext<ForIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		public ForStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 2, RULE_dcl);
		int _la;
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new PrintStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 36;
				Match(T__0);
				State = 37;
				expr(0);
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 38;
					Match(T__1);
					State = 39;
					expr(0);
					}
					}
					State = 44;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 45;
				Match(PARENTESIS_CIERRA);
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 46;
					Match(T__2);
					}
				}

				}
				break;
			case 2:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				Match(T__3);
				State = 50;
				expr(0);
				State = 51;
				block();
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 52;
					Match(T__4);
					State = 55;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 53;
						dcl();
						}
						break;
					case 2:
						{
						State = 54;
						block();
						}
						break;
					}
					}
				}

				}
				break;
			case 3:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 59;
				Match(T__5);
				State = 61;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 60;
					Match(PARENTESIS_ABRE);
					}
					break;
				}
				State = 63;
				expr(0);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARENTESIS_CIERRA) {
					{
					State = 64;
					Match(PARENTESIS_CIERRA);
					}
				}

				State = 67;
				block();
				}
				break;
			case 4:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 69;
				Match(T__5);
				State = 71;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 70;
					Match(PARENTESIS_ABRE);
					}
					break;
				}
				State = 73;
				forID();
				State = 74;
				expr(0);
				State = 75;
				Match(T__2);
				State = 76;
				expr(0);
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARENTESIS_CIERRA) {
					{
					State = 77;
					Match(PARENTESIS_CIERRA);
					}
				}

				State = 80;
				block();
				}
				break;
			case 5:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 82;
				Match(T__6);
				State = 83;
				expr(0);
				State = 84;
				Match(T__7);
				State = 85;
				caseList();
				State = 86;
				Match(T__8);
				}
				break;
			case 6:
				_localctx = new FuncDeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 88;
				Match(T__9);
				State = 89;
				Match(ID);
				State = 90;
				Match(PARENTESIS_ABRE);
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 91;
					parametros();
					}
				}

				State = 94;
				Match(PARENTESIS_CIERRA);
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17317308137472L) != 0)) {
					{
					State = 95;
					tipo();
					}
				}

				State = 98;
				block();
				}
				break;
			case 7:
				_localctx = new BreakStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 99;
				Match(T__10);
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 100;
					Match(T__2);
					}
				}

				}
				break;
			case 8:
				_localctx = new ContinueStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 103;
				Match(T__11);
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 104;
					Match(T__2);
					}
				}

				}
				break;
			case 9:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 107;
				Match(T__12);
				State = 108;
				expr(0);
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 109;
					Match(T__2);
					}
				}

				}
				break;
			case 10:
				_localctx = new SliceIndexContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 112;
				Match(T__13);
				State = 113;
				Match(PARENTESIS_ABRE);
				State = 114;
				expr(0);
				State = 115;
				Match(T__1);
				State = 116;
				expr(0);
				State = 117;
				Match(PARENTESIS_CIERRA);
				}
				break;
			case 11:
				_localctx = new SliceAsignContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 119;
				Match(ID);
				State = 120;
				Match(T__14);
				State = 121;
				expr(0);
				State = 122;
				Match(T__15);
				State = 123;
				Match(IGUAL);
				State = 124;
				expr(0);
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 125;
					Match(T__2);
					}
				}

				}
				break;
			case 12:
				_localctx = new FuncCallStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 128;
				varCall();
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 129;
					Match(T__2);
					}
				}

				}
				break;
			case 13:
				_localctx = new AsignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 132;
				varAsign();
				}
				break;
			case 14:
				_localctx = new VarDeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 133;
				varDcl();
				}
				break;
			case 15:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 134;
				Match(T__7);
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 80924055811718610L) != 0)) {
					{
					{
					State = 135;
					dcl();
					}
					}
					State = 140;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 141;
				Match(T__8);
				}
				break;
			case 16:
				_localctx = new ExprStmtContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 142;
				expr(0);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 143;
					Match(T__2);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSPUNTOS_IGUAL() { return GetToken(AnalizadorParser.DOSPUNTOS_IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SliceDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceDclContext sliceDcl() {
		SliceDclContext _localctx = new SliceDclContext(Context, State);
		EnterRule(_localctx, 4, RULE_sliceDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(ID);
			State = 149;
			Match(DOSPUNTOS_IGUAL);
			State = 150;
			Match(T__14);
			State = 151;
			Match(T__15);
			State = 152;
			tipo();
			State = 153;
			Match(T__7);
			State = 154;
			expr(0);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 155;
				Match(T__1);
				State = 156;
				expr(0);
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 162;
			Match(T__8);
			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 163;
				Match(T__2);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIDContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forID; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForIDContext forID() {
		ForIDContext _localctx = new ForIDContext(Context, State);
		EnterRule(_localctx, 6, RULE_forID);
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166;
				varDcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167;
				expr(0);
				State = 168;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext[] caseStmt() {
			return GetRuleContexts<CaseStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext caseStmt(int i) {
			return GetRuleContext<CaseStmtContext>(i);
		}
		public CaseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListContext caseList() {
		CaseListContext _localctx = new CaseListContext(Context, State);
		EnterRule(_localctx, 8, RULE_caseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 172;
				caseStmt();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__16 || _la==T__18 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public CaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStmtContext caseStmt() {
		CaseStmtContext _localctx = new CaseStmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_caseStmt);
		int _la;
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177;
				Match(T__16);
				State = 178;
				expr(0);
				State = 179;
				Match(T__17);
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 80924055811718610L) != 0)) {
					{
					{
					State = 180;
					dcl();
					}
					}
					State = 185;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186;
				Match(T__18);
				State = 187;
				Match(T__17);
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 80924055811718610L) != 0)) {
					{
					{
					State = 188;
					dcl();
					}
					}
					State = 193;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(T__7);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 80924055811718610L) != 0)) {
				{
				{
				State = 197;
				dcl();
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 203;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(AnalizadorParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSPUNTOS_IGUAL() { return GetToken(AnalizadorParser.DOSPUNTOS_IGUAL, 0); }
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(Context, State);
		EnterRule(_localctx, 14, RULE_varDcl);
		int _la;
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205;
				Match(T__19);
				State = 206;
				Match(ID);
				State = 207;
				tipo();
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGUAL) {
					{
					State = 208;
					Match(IGUAL);
					State = 209;
					expr(0);
					}
				}

				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 212;
					Match(T__2);
					}
				}

				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				Match(ID);
				State = 216;
				Match(DOSPUNTOS_IGUAL);
				State = 217;
				expr(0);
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 218;
					Match(T__2);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAsignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(AnalizadorParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarAsignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAsign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarAsign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarAsignContext varAsign() {
		VarAsignContext _localctx = new VarAsignContext(Context, State);
		EnterRule(_localctx, 16, RULE_varAsign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(ID);
			State = 224;
			Match(IGUAL);
			State = 225;
			expr(0);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 226;
				Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public VarCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarCallContext varCall() {
		VarCallContext _localctx = new VarCallContext(Context, State);
		EnterRule(_localctx, 18, RULE_varCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(ID);
			State = 230;
			Match(PARENTESIS_ABRE);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 80924055810637824L) != 0)) {
				{
				State = 231;
				args();
				}
			}

			State = 234;
			Match(PARENTESIS_CIERRA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametrosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ParametrosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametros; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametros(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametrosContext parametros() {
		ParametrosContext _localctx = new ParametrosContext(Context, State);
		EnterRule(_localctx, 20, RULE_parametros);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			param();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 237;
				Match(T__1);
				State = 238;
				param();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 22, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(ID);
			State = 245;
			tipo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 24, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			expr(0);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 248;
				Match(T__1);
				State = 249;
				expr(0);
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CorchetesContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CorchetesContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCorchetes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementoDecrementoContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		public IncrementoDecrementoContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementoDecremento(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorParser.PARENTESIS_CIERRA, 0); }
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelationalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceDeclStmtContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public SliceDclContext sliceDcl() {
			return GetRuleContext<SliceDclContext>(0);
		}
		public SliceDeclStmtContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceDeclStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpCharContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARACTER() { return GetToken(AnalizadorParser.CARACTER, 0); }
		public ExpCharContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpChar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpIntegerContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AnalizadorParser.INT, 0); }
		public ExpIntegerContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccesoSliceContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AccesoSliceContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccesoSlice(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivModContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(AnalizadorParser.MODULO, 0); }
		public MulDivModContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		public IdentifierContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsigAddSubContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AsigAddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsigAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegateContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpDoubleContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(AnalizadorParser.DECIMAL, 0); }
		public ExpDoubleContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgualDesigualContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IgualDesigualContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgualDesigual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpBooleanContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEANO() { return GetToken(AnalizadorParser.BOOLEANO, 0); }
		public ExpBooleanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpStringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CADENA() { return GetToken(AnalizadorParser.CADENA, 0); }
		public ExpStringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarCallContext varCall() {
			return GetRuleContext<VarCallContext>(0);
		}
		public FuncCallExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 256;
				Match(T__20);
				State = 257;
				expr(21);
				}
				break;
			case 2:
				{
				_localctx = new NegateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 258;
				Match(T__21);
				State = 259;
				expr(20);
				}
				break;
			case 3:
				{
				_localctx = new IncrementoDecrementoContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 260;
				Match(ID);
				State = 261;
				((IncrementoDecrementoContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__22 || _la==T__23) ) {
					((IncrementoDecrementoContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				{
				_localctx = new AsigAddSubContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 262;
				Match(ID);
				State = 263;
				((AsigAddSubContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__33 || _la==T__34) ) {
					((AsigAddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 264;
				expr(14);
				}
				break;
			case 5:
				{
				_localctx = new SliceDeclStmtContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 265;
				sliceDcl();
				}
				break;
			case 6:
				{
				_localctx = new AccesoSliceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 266;
				Match(ID);
				State = 267;
				Match(T__14);
				State = 268;
				expr(0);
				State = 269;
				Match(T__15);
				}
				break;
			case 7:
				{
				_localctx = new ExpIntegerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 271;
				Match(INT);
				}
				break;
			case 8:
				{
				_localctx = new ExpDoubleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 272;
				Match(DECIMAL);
				}
				break;
			case 9:
				{
				_localctx = new ExpStringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 273;
				Match(CADENA);
				}
				break;
			case 10:
				{
				_localctx = new ExpBooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 274;
				Match(BOOLEANO);
				}
				break;
			case 11:
				{
				_localctx = new ExpCharContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 275;
				Match(CARACTER);
				}
				break;
			case 12:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 276;
				Match(ID);
				}
				break;
			case 13:
				{
				_localctx = new FuncCallExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 277;
				varCall();
				}
				break;
			case 14:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 278;
				Match(PARENTESIS_ABRE);
				State = 279;
				expr(0);
				State = 280;
				Match(PARENTESIS_CIERRA);
				}
				break;
			case 15:
				{
				_localctx = new CorchetesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 282;
				Match(T__14);
				State = 283;
				expr(0);
				State = 284;
				Match(T__15);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 308;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 306;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new MulDivModContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 288;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 289;
						((MulDivModContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199355404288L) != 0)) ) {
							((MulDivModContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 290;
						expr(19);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 291;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 292;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__21 || _la==T__26) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 293;
						expr(18);
						}
						break;
					case 3:
						{
						_localctx = new RelationalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 294;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 295;
						((RelationalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4026531840L) != 0)) ) {
							((RelationalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 296;
						expr(17);
						}
						break;
					case 4:
						{
						_localctx = new IgualDesigualContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 297;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 298;
						((IgualDesigualContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__31 || _la==T__32) ) {
							((IgualDesigualContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 299;
						expr(16);
						}
						break;
					case 5:
						{
						_localctx = new AndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 300;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 301;
						((AndContext)_localctx).op = Match(T__35);
						State = 302;
						expr(14);
						}
						break;
					case 6:
						{
						_localctx = new OrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 303;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 304;
						((OrContext)_localctx).op = Match(T__36);
						State = 305;
						expr(13);
						}
						break;
					}
					} 
				}
				State = 310;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TipoContext : ParserRuleContext {
		public TipoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorVisitor<TResult> typedVisitor = visitor as IAnalizadorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoContext tipo() {
		TipoContext _localctx = new TipoContext(Context, State);
		EnterRule(_localctx, 28, RULE_tipo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17317308137472L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 18);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,57,314,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,5,0,32,8,0,10,0,12,0,35,9,0,1,1,1,1,1,1,1,1,5,1,41,8,1,10,1,12,1,44,
		9,1,1,1,1,1,3,1,48,8,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,56,8,1,3,1,58,8,1,1,
		1,1,1,3,1,62,8,1,1,1,1,1,3,1,66,8,1,1,1,1,1,1,1,1,1,3,1,72,8,1,1,1,1,1,
		1,1,1,1,1,1,3,1,79,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		3,1,93,8,1,1,1,1,1,3,1,97,8,1,1,1,1,1,1,1,3,1,102,8,1,1,1,1,1,3,1,106,
		8,1,1,1,1,1,1,1,3,1,111,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,3,1,127,8,1,1,1,1,1,3,1,131,8,1,1,1,1,1,1,1,1,1,5,1,137,
		8,1,10,1,12,1,140,9,1,1,1,1,1,1,1,3,1,145,8,1,3,1,147,8,1,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,5,2,158,8,2,10,2,12,2,161,9,2,1,2,1,2,3,2,165,
		8,2,1,3,1,3,1,3,1,3,3,3,171,8,3,1,4,4,4,174,8,4,11,4,12,4,175,1,5,1,5,
		1,5,1,5,5,5,182,8,5,10,5,12,5,185,9,5,1,5,1,5,1,5,5,5,190,8,5,10,5,12,
		5,193,9,5,3,5,195,8,5,1,6,1,6,5,6,199,8,6,10,6,12,6,202,9,6,1,6,1,6,1,
		7,1,7,1,7,1,7,1,7,3,7,211,8,7,1,7,3,7,214,8,7,1,7,1,7,1,7,1,7,3,7,220,
		8,7,3,7,222,8,7,1,8,1,8,1,8,1,8,3,8,228,8,8,1,9,1,9,1,9,3,9,233,8,9,1,
		9,1,9,1,10,1,10,1,10,5,10,240,8,10,10,10,12,10,243,9,10,1,11,1,11,1,11,
		1,12,1,12,1,12,5,12,251,8,12,10,12,12,12,254,9,12,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,
		287,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,5,13,307,8,13,10,13,12,13,310,9,13,1,14,1,
		14,1,14,0,1,26,15,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,0,7,1,0,23,24,
		1,0,34,35,2,0,25,26,53,53,2,0,22,22,27,27,1,0,28,31,1,0,32,33,1,0,38,43,
		367,0,33,1,0,0,0,2,146,1,0,0,0,4,148,1,0,0,0,6,170,1,0,0,0,8,173,1,0,0,
		0,10,194,1,0,0,0,12,196,1,0,0,0,14,221,1,0,0,0,16,223,1,0,0,0,18,229,1,
		0,0,0,20,236,1,0,0,0,22,244,1,0,0,0,24,247,1,0,0,0,26,286,1,0,0,0,28,311,
		1,0,0,0,30,32,3,2,1,0,31,30,1,0,0,0,32,35,1,0,0,0,33,31,1,0,0,0,33,34,
		1,0,0,0,34,1,1,0,0,0,35,33,1,0,0,0,36,37,5,1,0,0,37,42,3,26,13,0,38,39,
		5,2,0,0,39,41,3,26,13,0,40,38,1,0,0,0,41,44,1,0,0,0,42,40,1,0,0,0,42,43,
		1,0,0,0,43,45,1,0,0,0,44,42,1,0,0,0,45,47,5,57,0,0,46,48,5,3,0,0,47,46,
		1,0,0,0,47,48,1,0,0,0,48,147,1,0,0,0,49,50,5,4,0,0,50,51,3,26,13,0,51,
		57,3,12,6,0,52,55,5,5,0,0,53,56,3,2,1,0,54,56,3,12,6,0,55,53,1,0,0,0,55,
		54,1,0,0,0,56,58,1,0,0,0,57,52,1,0,0,0,57,58,1,0,0,0,58,147,1,0,0,0,59,
		61,5,6,0,0,60,62,5,56,0,0,61,60,1,0,0,0,61,62,1,0,0,0,62,63,1,0,0,0,63,
		65,3,26,13,0,64,66,5,57,0,0,65,64,1,0,0,0,65,66,1,0,0,0,66,67,1,0,0,0,
		67,68,3,12,6,0,68,147,1,0,0,0,69,71,5,6,0,0,70,72,5,56,0,0,71,70,1,0,0,
		0,71,72,1,0,0,0,72,73,1,0,0,0,73,74,3,6,3,0,74,75,3,26,13,0,75,76,5,3,
		0,0,76,78,3,26,13,0,77,79,5,57,0,0,78,77,1,0,0,0,78,79,1,0,0,0,79,80,1,
		0,0,0,80,81,3,12,6,0,81,147,1,0,0,0,82,83,5,7,0,0,83,84,3,26,13,0,84,85,
		5,8,0,0,85,86,3,8,4,0,86,87,5,9,0,0,87,147,1,0,0,0,88,89,5,10,0,0,89,90,
		5,52,0,0,90,92,5,56,0,0,91,93,3,20,10,0,92,91,1,0,0,0,92,93,1,0,0,0,93,
		94,1,0,0,0,94,96,5,57,0,0,95,97,3,28,14,0,96,95,1,0,0,0,96,97,1,0,0,0,
		97,98,1,0,0,0,98,147,3,12,6,0,99,101,5,11,0,0,100,102,5,3,0,0,101,100,
		1,0,0,0,101,102,1,0,0,0,102,147,1,0,0,0,103,105,5,12,0,0,104,106,5,3,0,
		0,105,104,1,0,0,0,105,106,1,0,0,0,106,147,1,0,0,0,107,108,5,13,0,0,108,
		110,3,26,13,0,109,111,5,3,0,0,110,109,1,0,0,0,110,111,1,0,0,0,111,147,
		1,0,0,0,112,113,5,14,0,0,113,114,5,56,0,0,114,115,3,26,13,0,115,116,5,
		2,0,0,116,117,3,26,13,0,117,118,5,57,0,0,118,147,1,0,0,0,119,120,5,52,
		0,0,120,121,5,15,0,0,121,122,3,26,13,0,122,123,5,16,0,0,123,124,5,54,0,
		0,124,126,3,26,13,0,125,127,5,3,0,0,126,125,1,0,0,0,126,127,1,0,0,0,127,
		147,1,0,0,0,128,130,3,18,9,0,129,131,5,3,0,0,130,129,1,0,0,0,130,131,1,
		0,0,0,131,147,1,0,0,0,132,147,3,16,8,0,133,147,3,14,7,0,134,138,5,8,0,
		0,135,137,3,2,1,0,136,135,1,0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,
		139,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,147,5,9,0,0,142,144,3,
		26,13,0,143,145,5,3,0,0,144,143,1,0,0,0,144,145,1,0,0,0,145,147,1,0,0,
		0,146,36,1,0,0,0,146,49,1,0,0,0,146,59,1,0,0,0,146,69,1,0,0,0,146,82,1,
		0,0,0,146,88,1,0,0,0,146,99,1,0,0,0,146,103,1,0,0,0,146,107,1,0,0,0,146,
		112,1,0,0,0,146,119,1,0,0,0,146,128,1,0,0,0,146,132,1,0,0,0,146,133,1,
		0,0,0,146,134,1,0,0,0,146,142,1,0,0,0,147,3,1,0,0,0,148,149,5,52,0,0,149,
		150,5,55,0,0,150,151,5,15,0,0,151,152,5,16,0,0,152,153,3,28,14,0,153,154,
		5,8,0,0,154,159,3,26,13,0,155,156,5,2,0,0,156,158,3,26,13,0,157,155,1,
		0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,
		161,159,1,0,0,0,162,164,5,9,0,0,163,165,5,3,0,0,164,163,1,0,0,0,164,165,
		1,0,0,0,165,5,1,0,0,0,166,171,3,14,7,0,167,168,3,26,13,0,168,169,5,3,0,
		0,169,171,1,0,0,0,170,166,1,0,0,0,170,167,1,0,0,0,171,7,1,0,0,0,172,174,
		3,10,5,0,173,172,1,0,0,0,174,175,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,
		0,176,9,1,0,0,0,177,178,5,17,0,0,178,179,3,26,13,0,179,183,5,18,0,0,180,
		182,3,2,1,0,181,180,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,
		0,0,0,184,195,1,0,0,0,185,183,1,0,0,0,186,187,5,19,0,0,187,191,5,18,0,
		0,188,190,3,2,1,0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,
		192,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,194,177,1,0,0,0,194,186,1,
		0,0,0,195,11,1,0,0,0,196,200,5,8,0,0,197,199,3,2,1,0,198,197,1,0,0,0,199,
		202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,203,1,0,0,0,202,200,1,
		0,0,0,203,204,5,9,0,0,204,13,1,0,0,0,205,206,5,20,0,0,206,207,5,52,0,0,
		207,210,3,28,14,0,208,209,5,54,0,0,209,211,3,26,13,0,210,208,1,0,0,0,210,
		211,1,0,0,0,211,213,1,0,0,0,212,214,5,3,0,0,213,212,1,0,0,0,213,214,1,
		0,0,0,214,222,1,0,0,0,215,216,5,52,0,0,216,217,5,55,0,0,217,219,3,26,13,
		0,218,220,5,3,0,0,219,218,1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,
		205,1,0,0,0,221,215,1,0,0,0,222,15,1,0,0,0,223,224,5,52,0,0,224,225,5,
		54,0,0,225,227,3,26,13,0,226,228,5,3,0,0,227,226,1,0,0,0,227,228,1,0,0,
		0,228,17,1,0,0,0,229,230,5,52,0,0,230,232,5,56,0,0,231,233,3,24,12,0,232,
		231,1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,235,5,57,0,0,235,19,1,
		0,0,0,236,241,3,22,11,0,237,238,5,2,0,0,238,240,3,22,11,0,239,237,1,0,
		0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,21,1,0,0,0,243,
		241,1,0,0,0,244,245,5,52,0,0,245,246,3,28,14,0,246,23,1,0,0,0,247,252,
		3,26,13,0,248,249,5,2,0,0,249,251,3,26,13,0,250,248,1,0,0,0,251,254,1,
		0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,25,1,0,0,0,254,252,1,0,0,0,255,
		256,6,13,-1,0,256,257,5,21,0,0,257,287,3,26,13,21,258,259,5,22,0,0,259,
		287,3,26,13,20,260,261,5,52,0,0,261,287,7,0,0,0,262,263,5,52,0,0,263,264,
		7,1,0,0,264,287,3,26,13,14,265,287,3,4,2,0,266,267,5,52,0,0,267,268,5,
		15,0,0,268,269,3,26,13,0,269,270,5,16,0,0,270,287,1,0,0,0,271,287,5,47,
		0,0,272,287,5,48,0,0,273,287,5,51,0,0,274,287,5,49,0,0,275,287,5,50,0,
		0,276,287,5,52,0,0,277,287,3,18,9,0,278,279,5,56,0,0,279,280,3,26,13,0,
		280,281,5,57,0,0,281,287,1,0,0,0,282,283,5,15,0,0,283,284,3,26,13,0,284,
		285,5,16,0,0,285,287,1,0,0,0,286,255,1,0,0,0,286,258,1,0,0,0,286,260,1,
		0,0,0,286,262,1,0,0,0,286,265,1,0,0,0,286,266,1,0,0,0,286,271,1,0,0,0,
		286,272,1,0,0,0,286,273,1,0,0,0,286,274,1,0,0,0,286,275,1,0,0,0,286,276,
		1,0,0,0,286,277,1,0,0,0,286,278,1,0,0,0,286,282,1,0,0,0,287,308,1,0,0,
		0,288,289,10,18,0,0,289,290,7,2,0,0,290,307,3,26,13,19,291,292,10,17,0,
		0,292,293,7,3,0,0,293,307,3,26,13,18,294,295,10,16,0,0,295,296,7,4,0,0,
		296,307,3,26,13,17,297,298,10,15,0,0,298,299,7,5,0,0,299,307,3,26,13,16,
		300,301,10,13,0,0,301,302,5,36,0,0,302,307,3,26,13,14,303,304,10,12,0,
		0,304,305,5,37,0,0,305,307,3,26,13,13,306,288,1,0,0,0,306,291,1,0,0,0,
		306,294,1,0,0,0,306,297,1,0,0,0,306,300,1,0,0,0,306,303,1,0,0,0,307,310,
		1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,27,1,0,0,0,310,308,1,0,0,0,
		311,312,7,6,0,0,312,29,1,0,0,0,38,33,42,47,55,57,61,65,71,78,92,96,101,
		105,110,126,130,138,144,146,159,164,170,175,183,191,194,200,210,213,219,
		221,227,232,241,252,286,306,308
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
